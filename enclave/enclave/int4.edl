enclave {

    trusted {
        public int ec_int4_cmp([in, count=lhs_size] uint8_t *lhs, size_t lhs_size,
                [in, count=rhs_size] uint8_t *rhs, size_t rhs_size) transition_using_threads;

        public int ec_int4_add([in, count=lhs_size] uint8_t *lhs, size_t lhs_size,
                [in, count=rhs_size] uint8_t *rhs, size_t rhs_size,
                [out, count=result_size] uint8_t *result, size_t result_size) transition_using_threads;

        public int ec_int4_sub([in, count=lhs_size] uint8_t *lhs, size_t lhs_size,
                [in, count=rhs_size] uint8_t *rhs, size_t rhs_size,
                [out, count=result_size] uint8_t *result, size_t result_size) transition_using_threads;

        public int ec_int4_mul([in, count=lhs_size] uint8_t *lhs, size_t lhs_size,
                [in, count=rhs_size] uint8_t *rhs, size_t rhs_size,
                [out, count=result_size] uint8_t *result, size_t result_size) transition_using_threads;

        public int ec_int4_div([in, count=lhs_size] uint8_t *lhs, size_t lhs_size,
                [in, count=rhs_size] uint8_t *rhs, size_t rhs_size,
                [out, count=result_size] uint8_t *result, size_t result_size) transition_using_threads;

        public int ec_int4_mod([in, count=lhs_size] uint8_t *lhs, size_t lhs_size,
                [in, count=rhs_size] uint8_t *rhs, size_t rhs_size,
                [out, count=result_size] uint8_t *result, size_t result_size) transition_using_threads;

        public int ec_int4_pow([in, count=lhs_size] uint8_t *lhs, size_t lhs_size,
                [in, count=rhs_size] uint8_t *rhs, size_t rhs_size,
                [out, count=result_size] uint8_t *result, size_t result_size) transition_using_threads;

        public int ec_int4_div2([in, count=lhs_size] uint8_t *lhs, size_t lhs_size,
                int rhs,
                [out, count=result_size] uint8_t *result, size_t result_size) transition_using_threads;
    };
};
